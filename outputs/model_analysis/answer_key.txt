

Definition of Algorithm:   -2.5 marks
An algorithm is a finite set of well-defined instructions that, when executed, perform a specific task to solve a problem. It must be precise, efficient, and structured to produce the desired outcome.

Five Important Characteristics of an Algorithm:

1. Finiteness:  -1.5 marks
   - An algorithm must always terminate after a finite number of steps.
   - Ensures that the algorithm does not result in an infinite loop and completes execution in a reasonable time.

2. Definiteness:   -1.5 marks
   - Each instruction must be clear, precise, and unambiguous.
   - Prevents confusion and ensures that the algorithm performs consistently.

3. Input:   -1.5 marks
   - An algorithm may take zero or more inputs.
   - Inputs allow algorithms to handle variable data dynamically.

4. Output:   -1.5 marks
   - An algorithm must produce at least one output as the result.
   - The output represents the solution to the problem.

5. Effectiveness:   -1.5 marks
   - Each step should be simple and feasible.
   - Ensures that the operations can be executed in a limited amount of time.

---

2a.

i. strcpy() - String Copy Function   -2.5 marks

Definition:
strcpy() is a function that copies the content of one string into another.

Syntax:
char* strcpy(char *destination, const char *source);

Example:
#include <stdio.h>
#include <string.h>

int main() {
    char source[] = "Hello, World!";
    char destination[20];

    strcpy(destination, source);

    printf("Copied String: %s\n", destination);
    return 0;
}

Output:
Copied String: Hello, World!

ii. strlen() - String Length Function   -2.5 marks

Definition:
strlen() is used to calculate the length of a string (excluding the null character \0).

Syntax:
size_t strlen(const char *str);

Example:
#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Programming";
    int length = strlen(str);

    printf("Length of the string: %d\n", length);
    return 0;
}

Output:
Length of the string: 11

---

2b. 

C Program:    -5 marks
#include <stdio.h>
#include <string.h>

int main() {
    char name[50];
    int i;

    printf("Enter your name: ");
    scanf("%s", name);

    printf("ASCII values of the entered name:\n");
    for(i = 0; i < strlen(name); i++) {
        printf("%c: %d\n", name[i], name[i]);
    }

    return 0;
}

Example Output:
Enter your name: Alex
ASCII values of the entered name:
A: 65
l: 108
e: 101
x: 120

